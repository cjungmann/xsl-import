#! /usr/bin/env python

import sys
from os import path
from xml.dom import minidom

g_filename = None
flag_sources = False
flag_strip_comments = False
base_path = ""

def show_usage():
    print ""
    print "./xsl-import [-s] [--help] filename.xsl"
    print ""
    print "--help: Show usage."
    print "-i:     Tag root children with import file name."
    print "-s:     Strip comments from elements (this will include import comments). "
    print ""

def process_flag_list(flaglist):
    global flag_sources, flag_strip_comments
    for ch in flaglist:
        if ch=='i':
            flag_sources = True
        elif ch=='s':
            flag_strip_comments = True

def process_arg_list():
    global g_filename, flag_sources
    for arg in sys.argv[1:]:
        if arg=="--help":
            g_filename = None
            break
        elif arg[0]=='-':
            process_flag_list(arg[1:])
        else:
            g_filename = arg

def get_file_name():
    return g_filename

def same_by_attribute(el1, el2, attribute_name):
    """Returns True if el1 and el2 match with respect the attribute attribute_name.

    The elements are considered matching if:
    1. Neither element has attribute_name.
    2. Both elements include attribute_name and the values match.

    Any other configuration is deemed to be non-matching.

    The function returns True if matching and False if non-matching.
    """
    has1 = el1.hasAttribute(attribute_name)
    has2 = el2.hasAttribute(attribute_name)

    if not has1 and not has2:
        return True;
        
    if has1 and has2:
            el1a = el1.getAttribute(attribute_name)
            el2a = el2.getAttribute(attribute_name)
            return el1a==el2a
    
    return False

def elements_are_equivalent(el1, el2):
    """Determines if two elements are equivalent by tagName and a few attributes."""
    alist = ["name","match","mode","use-attribute-sets"]
    if el1.tagName!=el2.tagName:
        return False
    else:
        try:
            for a in alist:
                if not same_by_attribute(el1,el2,a):
                    return False
            return True
        except Exception as e:
            print "Exception in elements_are_equivalent (%s)" % e
                    
    return False

def find_matching_element(node, import_element):
    """Searches siblings of node for an element that matches import_element.

    node should be the first sibling following the xsl:import element in the
    file that is being processed for imports.

    Since xsl:import elements must preceed all other elements, we can be
    confident that no potential matches will be missed by skipping above
    node.
    """
    n = node
    while n is not None:
        if n.nodeType==n.ELEMENT_NODE:
            if elements_are_equivalent(n, import_element):
                return True
        n = n.nextSibling
    return False

def get_owner_document(node):
    """Implemented because xml.dom.minidom doesn't"""
    while node.nodeType != node.DOCUMENT_NODE:
        node = node.parentNode
    if node.nodeType==node.DOCUMENT_NODE:
        return node
    else:
        return None

def copy_element_omit_comments(el, doc=None):
    """Recursive copy element function that omits comments."""
    if not doc:
        doc = get_owner_document(el)
        
    rnode = doc.createElement(el.tagName)

    for aname, avalue in el.attributes.items():
        rnode.setAttribute(aname, avalue)

    for child in el.childNodes:
        if child.nodeType==child.COMMENT_NODE:
            continue
        elif child.nodeType==child.TEXT_NODE:
            rnode.appendChild(doc.createTextNode(child.nodeValue))
        elif child.nodeType==child.ELEMENT_NODE:
            rnode.appendChild(copy_element_omit_comments(child,doc))

    return rnode

def first_non_attribute_node(el):
    """Return first child so a source comment can be the first child."""
    for n in el.childNodes:
        if n.nodeType==n.ATTRIBUTE_NODE:
            continue
        else:
            return n
    return None

def source_flag_element(el,filepath,doc,parent):
    first = first_non_attribute_node(el)
    el.insertBefore(doc.createComment(" imported %s " % filepath), first)

def merge_import_contents(insert_before_node, importdoc, filepath):
    """Copies unmatched elements from importdoc before import_node.

       The function only copies element nodes from the import file.
       Comment, processing instruction, and text nodes will be skipped
       when encountered during the iteration of the child nodes of the
       import file's document element (xsl:stylesheet).

       If flag_sources is set via the -i command line flag, each
       imported element will be tagged with a comment node that indicates
       the file from which the element came.
    """
    parent = insert_before_node.parentNode
    odoc = get_owner_document(parent)
    for impnode in importdoc.documentElement.childNodes:
        if impnode.nodeType==impnode.ELEMENT_NODE:
            if not find_matching_element(insert_before_node, impnode):
                if flag_strip_comments:
                    newnode = copy_element_omit_comments(impnode, odoc)
                else:
                    newnode = impnode.cloneNode(True)
                    
                parent.insertBefore(newnode,
                                    insert_before_node)

                if flag_sources and not flag_strip_comments:
                    source_flag_element(newnode,filepath,odoc,parent)

def open_and_merge_imports(insert_before_node, filepath):
    newdoc = open_xsl_with_imports(filepath)
    if newdoc:
        merge_import_contents(insert_before_node, newdoc, filepath)

def incorporate_import(import_node):
    global base_path
    """Imports unmatched elements of file named in import_node/@href."""
    if import_node.hasAttribute("href"):
        fpath = import_node.getAttribute("href")

        # Massage fpath if it's not an absolute path and there is a base_path
        if fpath[0]!='/' and len(base_path):
            fpath = base_path + "/" + fpath

        open_and_merge_imports(import_node, fpath)

def collect_import_nodes(doc):
    """Returns a list of xsl:import nodes in reverse document order.

    The nodes are in reverse order because later imports take precedence over
    earlier imports.  This program only imports elements that are unmatched in
    the document, so it's necessary to ensure the preferred elements are copied
    first.
    """
    ilist = []
    for node in doc.documentElement.childNodes:
        if node.nodeType==node.ELEMENT_NODE:
            if node.localName=="import":
                ilist.append(node)
    return ilist

def process_imports(doc):
    """For an open XSL document, import files according to XSL rules.

    Because incorporate_import() copies elements that do not already exist in
    doc, the imports here are processed in reverse order (via pop) to ensure
    that higher-priority elements have already been copied when lower-priority
    elements are considered for inclusion.

    Each found import element is removed once its contents have been processed.
    """
    ilist = collect_import_nodes(doc)
    docel = doc.documentElement
    while len(ilist) > 0:
        inode = ilist.pop()
        incorporate_import(inode)
        docel.removeChild(inode)

def confirm_xsl_doc(doc):
    return doc.documentElement.tagName=="xsl:stylesheet";

def open_xsl_with_imports(filepath):
    """Opens file and confirms as XSL before sending off to process the imports.

    This will be a recursive function that will be called for each import file
    to reconcile any xsl:import elements in the import file before returning
    the document the reconcile the processed import file.
    """
    doc = minidom.parse(filepath)
    if doc and confirm_xsl_doc(doc):
        try:
            process_imports(doc)
        except Exception as e:
            print e
    return doc

def serialize(doc):
    doc.writexml(sys.stdout,"","","")

def main():
    global base_path
    process_arg_list()
    
    filename = get_file_name()
    if filename:
        # Save directory to as base for relative import paths:
        base_path = path.dirname(filename)
        doc = open_xsl_with_imports(filename)
        if doc:
            serialize(doc)
    else:
        show_usage()
        

if __name__ == "__main__":
    main()
